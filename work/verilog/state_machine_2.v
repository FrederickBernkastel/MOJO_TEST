/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module state_machine_2 (
    input clk,
    input rst,
    input [1:0] full_adder_output,
    output reg [7:0] led
  );
  
  
  
  localparam CORRECT_OUTPUT_state = 1'd0;
  localparam WRONG_OUTPUT_state = 1'd1;
  
  reg M_state_d, M_state_q = CORRECT_OUTPUT_state;
  reg [27:0] M_counter_d, M_counter_q = 1'h0;
  
  always @* begin
    M_state_d = M_state_q;
    M_counter_d = M_counter_q;
    
    led = 8'h00;
    
    case (M_state_q)
      CORRECT_OUTPUT_state: begin
        if (M_counter_q[0+24-:25] == 25'h1800000) begin
          if (M_counter_q[25+2-:3] == 3'h0) begin
            if (full_adder_output != 2'h0) begin
              M_state_d = WRONG_OUTPUT_state;
            end
          end else begin
            if (M_counter_q[25+2-:3] == 3'h4 || M_counter_q[25+2-:3] == 3'h2 || M_counter_q[25+2-:3] == 3'h1) begin
              if (full_adder_output != 2'h1) begin
                M_state_d = WRONG_OUTPUT_state;
              end
            end else begin
              if (M_counter_q[25+2-:3] == 3'h3 || M_counter_q[25+2-:3] == 3'h5 || M_counter_q[25+2-:3] == 3'h6) begin
                if (full_adder_output != 2'h2) begin
                  M_state_d = WRONG_OUTPUT_state;
                end
              end else begin
                if (M_counter_q[25+2-:3] == 3'h7) begin
                  if (full_adder_output != 2'h3) begin
                    M_state_d = WRONG_OUTPUT_state;
                  end
                end
              end
            end
          end
        end
        led = {M_counter_q[25+2-:3], 5'h00};
        M_counter_d = M_counter_q + 1'h1;
      end
      WRONG_OUTPUT_state: begin
        led = 8'hff;
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_counter_q <= 1'h0;
      M_state_q <= 1'h0;
    end else begin
      M_counter_q <= M_counter_d;
      M_state_q <= M_state_d;
    end
  end
  
endmodule
